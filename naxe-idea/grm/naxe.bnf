{

    parserClass     ="org.carracoo.naxe.idea.lang.parser.NaxeParser"
    parserUtilClass ="com.intellij.lang.parser.GeneratedParserUtilBase"
    parserImports   ="static org.carracoo.naxe.idea.lang.NaxeToken.*"

    implements  ="org.carracoo.naxe.idea.lang.psi.NaxePsiElement"
    extends     ="org.carracoo.naxe.idea.lang.psi.NaxePsiElementImpl"



    elementTypeHolderClass  ="org.carracoo.naxe.idea.lang.lexer.NaxeElements"
    elementTypeClass        ="org.carracoo.naxe.idea.lang.NaxeToken"
    tokenTypeClass          ="org.carracoo.naxe.idea.lang.NaxeToken"

    psiPackage      = "org.carracoo.naxe.idea.lang.psi"
    psiImplPackage  = "org.carracoo.naxe.idea.lang.psi"

    psiClassPrefix      ="Naxe"
    psiImplClassSuffix  ="Impl"

    tokens            = [

        K_PACKAGE       = "package"
        K_USING         = "using"
        K_IMPORT        = "import"
        K_RENAME        = "rename"
        K_ENUM          = "enum"
        K_CAST          = "cast"
        K_CLASS         = "class"
        K_INHERITS      = "inherits"
        K_WITH          = "with"
        K_ANY           = "any"
        K_END           = "end"
        K_OPERATOR      = "operator"
        K_FUNCTION      = "function"
        K_VARIABLE      = "variable"
        K_GETTER        = "getter"
        K_SETTER        = "setter"
        K_VAR           = "var"
        K_ARG           = "arg"
        K_ARGS          = "args"
        K_IF            = "if"
        K_ELSE          = "else"
        K_SWITCH        = "switch"
        K_CASE          = "case"
        K_FOR           = "for"
        K_UNTIL         = "until"
        K_WHILE         = "while"
        K_THROW         = "throw"
        K_TRY           = "try"
        K_CATCH         = "catch"
        K_FINALLY       = "finally"
        K_IN            = "in"
        K_IS            = "is"
        K_AS            = "as"
        K_NEW           = "new"
        K_STATIC        = "static"
        K_BREAK         = "break"
        K_CONTINUE      = "continue"
        K_RETURN        = "return"
        K_SUPER         = "super"
        K_THIS          = "this"
        K_TRUE          = "true"
        K_FALSE         = "false"
        K_NULL          = "null"
        K_VOID          = "void"

        O_SEM      = ";"
        O_COM      = ","
        O_COL      = ":"
        O_NS       = "::"
        O_PAR      = "..."
        O_TO       = ".."
        O_DOT      = "."
        O_NUM      = "#"
        O_QM       = "?"
        O_SAT      = "@"
        O_EAT      = "@:"
        O_FUN      = "<:"



        O_ASG      = "="
        O_AADD     = "+="
        O_ASUB     = "-="
        O_AMUL     = "*="
        O_ADIV     = "/="
        O_AMOD     = "%="
        O_AAND     = "&="
        O_AOR      = "|="
        O_AXOR     = "^="
        O_ALSH     = "<<="
        O_ARSH     = ">>="
        O_AZSH     = ">>>="

        O_EQS      = "==="
        O_EQ       = "=="
        O_NES      = "!=="
        O_NE       = "!="
        O_INC      = "++"
        O_DEC      = "--"
        O_INF      = "<"
        O_SUP      = ">"
        O_IEQ      = "<="
        O_SEQ      = ">="

        O_NOT      = "!"
        O_NEG      = "~"

        O_BAND     = "&&"
        O_BOR      = "||"

        O_SUM      = "+"
        O_SUB      = "-"
        O_MUL      = "*"
        O_DIV      = "/"
        O_MOD      = "%"
        O_AND      = "&"
        O_OR       = "|"
        O_XOR      = "^"
        O_LSH      = "<<"
        O_RSH      = ">>"
        O_ZSH      = ">>>"


        LP       = "("
        RP       = ")"
        LB       = "{"
        RB       = "}"
        LS       = "["
        RS       = "]"


        SCOMMENT    = "regexp://.*"
        DCOMMENT    = "regexp:/\*\*(.|\n)*\*/"
        MCOMMENT    = "regexp:/\*(.|\n)*\*/"

        REGEXP      = "regexp:~\/([^\/\\]|\\\/|\\)*\/[gim]{0,3}"
        QSTRING     = "regexp:\"([^\"\\]|\\\"|\\\'|\\)*\""
        SSTRING     = "regexp:\'([^\'\\]|\\\"|\\\'|\\)*\'"

        INTEGER     = "regexp:\d+"
        LONG        = "regexp:\d+l"
        FLOAT       = "regexp:\d+\.\d+"
        DOUBLE      = "regexp:\d+\.\d+d"
        
        SMETA       = "regexp:@\w+"
        EMETA       = "regexp:@:\w+"
        WORD        = "regexp:\w+"
    ]
    extends(".*exp")
     = exp;
    extends("(mul|sum|bsh|cmp|bit|log)_exp")
     = binary_exp
    mixin("ref|(id|this|super)_exp")
     = "org.carracoo.naxe.idea.lang.psi.NaxePsiReferenceImpl";
    implements("ref|(id|this|super)_exp")
     = "org.carracoo.naxe.idea.lang.psi.NaxePsiReference";
}

naxe                ::= file_item*

identifier          ::= WORD
ref                 ::= identifier;
qualifier           ::= identifier ('.' identifier)*

component_name      ::= identifier;
component_type      ::= 'any' | 'void' | component_name type_params?;
type_params         ::= '[' component_type* ']'

regexp_lit          ::= REGEXP
string_lit          ::= QSTRING|SSTRING
number_lit          ::= FLOAT|INTEGER|LONG|DOUBLE
boolean_lit         ::= 'true'|'false'
null_lit            ::= 'null'

exp                        ::= (
    stm_grp                 |
    closure_exp             |
    var_exp                 |
    arg_exp                 |
    asg_exp                 |
    log_exp                 |
    bit_exp                 |
    cmp_exp                 |
    bsh_exp                 |
    sum_exp                 |
    mul_exp                 |
    unary_grp               |
    call_grp                |
    ref_grp                 |
    call_exp                |
    meta_grp                |
    primary_grp             |
    access_exp              |
    empty_exp               |
    error_exp               )  {recoverWhile=exp_rec};






private unary_grp          ::=
    une_inc_exp             |
    une_dec_exp             |
    uns_min_exp             |
    uns_neg_exp             |
    uns_not_exp             |
    uns_inc_exp             |
    uns_dec_exp             |
    uns_opt_exp             ;


private primary_grp        ::=
    id_exp                  |
    this_exp                |
    super_exp               |
    args_exp                |
    lit_exp                 |
    paren_exp               ;

fake binary_exp ::= exp+ {
  methods=[
    left  = "/exp[0]"
    right = "/exp[1]"
  ]
}

private asg_op ::= ('='|'+='|'-='|'*='|'/='|'%='|'&='|'|='|'^='|'<<='|'>>='|'>>>=');
private cmp_op ::= ('<'|'>'|'<='|'>='|'=='|'==='|'!='|'!==');
private add_op ::= ('+'|'-');
private mul_op ::= ('*'|'/'|'%');
private bsh_op ::= ('<<'|'>>'|'>>>');
private bit_op ::= ('&'|'|'|'^');
private log_op ::= ('&&'|'||');
private op     ::= asg_op|cmp_op|add_op|mul_op|bsh_op|bit_op|log_op;

empty_exp                  ::=';';
error_exp                  ::=(op|',');

asg_exp                    ::= exp asg_op exp { pin=2 rightAssociative=true }
cmp_exp                    ::= exp cmp_op exp { pin=2};
sum_exp                    ::= exp add_op exp { pin=2};
mul_exp                    ::= exp mul_op exp { pin=2};
bsh_exp                    ::= exp bsh_op exp { pin=2};
bit_exp                    ::= exp bit_op exp { pin=2};
log_exp                    ::= exp log_op exp { pin=2};


private stm_grp            ::=
    end_exp                 |
    if_exp                  |
    for_exp                 |
    while_exp               |
    until_exp               |
    with_exp                ;
if_exp                     ::= 'if'     paren_exp exp ('else' exp)? {pin=1}
for_exp                    ::= 'for'    paren_exp exp {pin=1}
while_exp                  ::= 'while'  paren_exp exp {pin=1}
until_exp                  ::= 'until'  paren_exp exp {pin=1}
with_exp                   ::= 'with'   paren_exp exp {pin=1}
end_exp                    ::= 'end'    exp?          {pin=1}


uns_inc_exp                ::= '++' exp
uns_dec_exp                ::= '--' exp
uns_min_exp                ::= '-'  exp
uns_neg_exp                ::= '~'  exp
uns_not_exp                ::= '!'  exp

une_inc_exp                ::= exp '++'
une_dec_exp                ::= exp '--'
uns_opt_exp                ::= id_exp '!'


arg_exp                    ::= 'arg'  var_item (',' var_item)* {pin=2};
var_exp                    ::= 'var'? var_item (',' var_item)* {pin=2};

var_item                   ::= component_name (',' component_name)* ':' component_type var_init? {pin=4};
var_init                   ::= '=' exp;

closure_exp                ::= '?' method_body ':' component_type {pin=2};



private meta_grp           ::= (s_meta_exp|e_meta_exp)

s_meta                     ::= ('@' | SMETA) paren?
s_metas                    ::= s_meta+
s_meta_exp                 ::= s_metas exp?

e_meta                     ::= ('@:' | EMETA) paren?
e_metas                    ::= e_meta+
e_meta_exp                 ::= exp e_metas  { rightAssociative=true }

access_exp                 ::= exp '.' exp  {pin=1}

call_exp                   ::= exp '(' [ !')' call_arg  (',' call_arg)* ] ')'
call_arg                   ::= (ref '::')? exp {pin=2}

private call_grp           ::=
    cast_exp                |
    as_exp                  ;
cast_exp                   ::= exp '.' 'cast' '(' component_type ')';
as_exp                     ::= exp '.' 'as' '(' component_type ')';

private ref_grp            ::=
    new_exp                 |
    cls_exp                 |
    ref_exp                 ;
cls_exp                    ::= exp '.' 'class';
new_exp                    ::= exp '.' 'new' ;
ref_exp                    ::= exp '.' ref;

id_exp                     ::= ref
this_exp                   ::= 'this'
super_exp                  ::= 'super'
args_exp                   ::= 'args'

lit_exp                    ::=
    null_lit                |
    boolean_lit             |
    number_lit              |
    regexp_lit              |
    string_lit              |
    object_exp              |
    array_exp               ;
paren_exp                  ::= paren (':' component_type)? {pin=1}
array_exp                  ::= '[' exp? (',' exp)* ']' {pin=1};
object_exp                 ::= '{' object_pair? (',' object_pair)* '}' {pin=1};
object_pair                ::= (identifier|string_lit) ':' exp

private file_item          ::= s_metas? (import_exp | class_exp | rename_exp| property_exp| method_exp | empty_exp) e_metas? {recoverWhile=file_rec};
private file_rec           ::= !(';'|'package'|'class'|'import'|'function'|'variable'|'rename'|s_meta);

import_exp                 ::= 'import' (component_name ':')? (qualifier|string_lit)  {pin=2};
rename_exp                 ::= 'rename' (component_name ':')? component_type {pin=2};

class_exp                  ::= 'class' component_name type_params? class_body? {
    pin=3
    implements             =  "org.carracoo.naxe.idea.lang.psi.NaxePsiClass"
    mixin                  =  "org.carracoo.naxe.idea.lang.psi.NaxePsiClassImpl"
}
class_body                 ::= '(' class_item*')' {pin=1}
private class_item         ::= s_metas? (operator_exp | method_exp | property_exp | inherits_exp |empty_exp) e_metas? { pin=3 recoverWhile=class_rec};
private class_rec          ::= !('('|')'|';'|'variable'|'function'|'inherits'|'operator'|s_meta);

inherits_exp               ::= 'inherits' component_type* {pin=2};

property_exp               ::= 'variable' component_name  property_body? ':' component_type var_init? {
    pin                    = 5
    implements             = "org.carracoo.naxe.idea.lang.psi.NaxePsiProperty"
    mixin                  = "org.carracoo.naxe.idea.lang.psi.NaxePsiPropertyImpl"
}

property_body              ::= '(' property_item* ')' {pin=1}
private property_item      ::= (getter_exp | setter_exp | empty_exp) {recoverWhile = property_rec};
private property_rec       ::= !('('|')'|';'|'setter'|'getter');

getter_exp                 ::= s_metas? 'getter' method_body? e_metas? {pin=3};
setter_exp                 ::= s_metas? 'setter' method_body? e_metas? {pin=3};

operator_name              ::= op {elementType=component_name};
operator_exp               ::= 'operator' operator_name operator_body ':' component_type  {
    pin                    = 5
    implements             = "org.carracoo.naxe.idea.lang.psi.NaxePsiOperator"
    mixin                  = "org.carracoo.naxe.idea.lang.psi.NaxePsiOperatorImpl"
}
operator_body              ::= paren {
    implements             =  "org.carracoo.naxe.idea.lang.psi.NaxeExecutionScope"
    mixin                  =  "org.carracoo.naxe.idea.lang.psi.NaxeExecutionScopeImpl"
}

method_exp                 ::= 'function' ('new'|component_name) method_body? ':' component_type {
    pin                    = 5
    implements             = "org.carracoo.naxe.idea.lang.psi.NaxePsiMethod"
    mixin                  = "org.carracoo.naxe.idea.lang.psi.NaxePsiMethodImpl"
}

method_body                ::= paren {
    implements             =  "org.carracoo.naxe.idea.lang.psi.NaxeExecutionScope"
    mixin                  =  "org.carracoo.naxe.idea.lang.psi.NaxeExecutionScopeImpl"
}

private paren              ::= '(' exp* ')'
private exp_rec            ::= !('('|')'|';'|'{'|'}'|'['|']'|':'|'::'|'<:'|'@'|'@:'|SMETA|EMETA|WORD|'function'|'variable'|'class'|'getter'|'setter');