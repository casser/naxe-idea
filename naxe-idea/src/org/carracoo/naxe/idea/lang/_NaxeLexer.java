/* The following code was generated by JFlex 1.4.3 on 6/3/14 12:23 PM */

package org.carracoo.naxe.idea.lang;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.carracoo.naxe.idea.lang.lexer.NaxeElements.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/3/14 12:23 PM from the specification file
 * <tt>/Users/Sergey/IdeaProjects/naxe/naxe-idea/src/org/carracoo/naxe/idea/lang/_NaxeLexer.flex</tt>
 */
public class _NaxeLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\2\1\1\1\0\1\2\1\1\16\4\4\0\1\2\1\74"+
    "\1\31\1\62\1\3\1\67\1\70\1\30\1\75\1\76\1\7\1\66"+
    "\1\61\1\21\1\17\1\10\1\14\11\11\1\6\1\60\1\64\1\65"+
    "\1\73\1\63\1\5\1\13\1\16\1\13\1\26\1\20\1\25\5\3"+
    "\1\24\3\3\1\22\7\3\1\15\2\3\1\101\1\23\1\102\1\72"+
    "\1\12\1\0\1\33\1\55\1\34\1\56\1\37\1\53\1\36\1\51"+
    "\1\42\1\3\1\35\1\50\1\44\1\43\1\45\1\32\1\3\1\46"+
    "\1\41\1\47\1\40\1\54\1\52\1\15\1\57\1\3\1\77\1\71"+
    "\1\100\1\27\41\4\2\0\4\3\4\0\1\3\2\0\1\4\7\0"+
    "\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0\u01ca\3\4\0"+
    "\14\3\16\0\5\3\7\0\1\3\1\0\1\3\21\0\160\4\5\3"+
    "\1\0\2\3\2\0\4\3\10\0\1\3\1\0\3\3\1\0\1\3"+
    "\1\0\24\3\1\0\123\3\1\0\213\3\1\0\5\4\2\0\236\3"+
    "\11\0\46\3\2\0\1\3\7\0\47\3\11\0\55\4\1\0\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\4\10\0\33\3\5\0\3\3"+
    "\15\0\4\4\7\0\1\3\4\0\13\4\5\0\53\3\37\4\4\0"+
    "\2\3\1\4\143\3\1\0\1\3\10\4\1\0\6\4\2\3\2\4"+
    "\1\0\4\4\2\3\12\4\3\3\2\0\1\3\17\0\1\4\1\3"+
    "\1\4\36\3\33\4\2\0\131\3\13\4\1\3\16\0\12\4\41\3"+
    "\11\4\2\3\4\0\1\3\5\0\26\3\4\4\1\3\11\4\1\3"+
    "\3\4\1\3\5\4\22\0\31\3\3\4\244\0\4\4\66\3\3\4"+
    "\1\3\22\4\1\3\7\4\12\3\2\4\2\0\12\4\1\0\7\3"+
    "\1\0\7\3\1\0\3\4\1\0\10\3\2\0\2\3\2\0\26\3"+
    "\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\4\1\3\7\4"+
    "\2\0\2\4\2\0\3\4\1\3\10\0\1\4\4\0\2\3\1\0"+
    "\3\3\2\4\2\0\12\4\4\3\7\0\1\3\5\0\3\4\1\0"+
    "\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\2\3\2\0\1\4\1\0\5\4\4\0\2\4\2\0"+
    "\3\4\3\0\1\4\7\0\4\3\1\0\1\3\7\0\14\4\3\3"+
    "\1\4\13\0\3\4\1\0\11\3\1\0\3\3\1\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\5\3\2\0\1\4\1\3\10\4\1\0"+
    "\3\4\1\0\3\4\2\0\1\3\17\0\2\3\2\4\2\0\12\4"+
    "\1\0\1\3\17\0\3\4\1\0\10\3\2\0\2\3\2\0\26\3"+
    "\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4\1\3\7\4"+
    "\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3\1\0\3\3"+
    "\2\4\2\0\12\4\1\0\1\3\20\0\1\4\1\3\1\0\6\3"+
    "\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3"+
    "\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\4\3\0\3\4"+
    "\1\0\4\4\2\0\1\3\6\0\1\4\16\0\12\4\11\0\1\3"+
    "\7\0\3\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3"+
    "\1\0\5\3\3\0\1\3\7\4\1\0\3\4\1\0\4\4\7\0"+
    "\2\4\1\0\2\3\6\0\2\3\2\4\2\0\12\4\22\0\2\4"+
    "\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3"+
    "\2\0\1\4\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4"+
    "\7\0\1\3\1\0\2\3\2\4\2\0\12\4\1\0\2\3\17\0"+
    "\2\4\1\0\10\3\1\0\3\3\1\0\51\3\2\0\1\3\7\4"+
    "\1\0\3\4\1\0\4\4\1\3\10\0\1\4\10\0\2\3\2\4"+
    "\2\0\12\4\12\0\6\3\2\0\2\4\1\0\22\3\3\0\30\3"+
    "\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\4\4\0\6\4"+
    "\1\0\1\4\1\0\10\4\22\0\2\4\15\0\60\3\1\4\2\3"+
    "\7\4\4\0\10\3\10\4\1\0\12\4\47\0\2\3\1\0\1\3"+
    "\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3"+
    "\1\4\2\3\6\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3"+
    "\1\0\6\4\2\0\12\4\2\0\2\3\42\0\1\3\27\0\2\4"+
    "\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\10\3\1\0\44\3\4\0\24\4\1\0\2\4\5\3\13\4\1\0"+
    "\44\4\11\0\1\4\71\0\53\3\24\4\1\3\12\4\6\0\6\3"+
    "\4\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3\4\4\15\3"+
    "\14\4\1\3\17\4\2\0\46\3\12\0\53\3\1\0\1\3\3\0"+
    "\u0149\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0"+
    "\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0\7\3\1\0"+
    "\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0\4\3\2\0"+
    "\103\3\2\0\3\4\40\0\20\3\20\0\125\3\14\0\u026c\3\2\0"+
    "\21\3\1\0\32\3\5\0\113\3\3\0\3\3\17\0\15\3\1\0"+
    "\4\3\3\4\13\0\22\3\3\4\13\0\22\3\2\4\14\0\15\3"+
    "\1\0\3\3\1\0\2\4\14\0\64\3\40\4\3\0\1\3\3\0"+
    "\2\3\1\4\2\0\12\4\41\0\3\4\2\0\12\4\6\0\130\3"+
    "\10\0\51\3\1\4\1\3\5\0\106\3\12\0\35\3\3\0\14\4"+
    "\4\0\14\4\12\0\12\4\36\3\2\0\5\3\13\0\54\3\4\0"+
    "\21\4\7\3\2\4\6\0\12\4\46\0\27\3\5\4\4\0\65\3"+
    "\12\4\1\0\35\4\2\0\13\4\6\0\12\4\15\0\1\3\130\0"+
    "\5\4\57\3\21\4\7\3\4\0\12\4\21\0\11\4\14\0\3\4"+
    "\36\3\12\4\3\0\2\3\12\4\6\0\46\3\16\4\14\0\44\3"+
    "\24\4\10\0\12\4\3\0\3\3\12\4\44\3\122\0\3\4\1\0"+
    "\25\4\4\3\1\4\4\3\1\4\15\0\300\3\47\4\25\0\4\4"+
    "\u0116\3\2\0\6\3\2\0\46\3\2\0\6\3\2\0\10\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\37\3\2\0\65\3\1\0"+
    "\7\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3\2\0"+
    "\6\3\4\0\15\3\5\0\3\3\1\0\7\3\16\0\5\4\32\0"+
    "\5\4\20\0\2\3\23\0\1\3\13\0\5\4\5\0\6\4\1\0"+
    "\1\3\15\0\1\3\20\0\15\3\3\0\32\3\26\0\15\4\4\0"+
    "\1\4\3\0\14\4\21\0\1\3\4\0\1\3\2\0\12\3\1\0"+
    "\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\1\0\13\3\2\0\4\3\5\0\5\3\4\0\1\3\21\0"+
    "\51\3\u0a77\0\57\3\1\0\57\3\1\0\205\3\6\0\4\3\3\4"+
    "\16\0\46\3\12\0\66\3\11\0\1\3\17\0\1\4\27\3\11\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\40\4\57\0\1\3\u01d5\0"+
    "\3\3\31\0\11\3\6\4\1\0\5\3\2\0\5\3\4\0\126\3"+
    "\2\0\2\4\2\0\3\3\1\0\132\3\1\0\4\3\5\0\51\3"+
    "\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0\u51cc\3"+
    "\64\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0\20\3\12\4\2\3"+
    "\24\0\57\3\1\4\14\0\2\4\1\0\31\3\10\0\120\3\2\4"+
    "\45\0\11\3\2\0\147\3\2\0\4\3\1\0\2\3\16\0\12\3"+
    "\120\0\10\3\1\4\3\3\1\4\4\3\1\4\27\3\5\4\20\0"+
    "\1\3\7\0\64\3\14\0\2\4\62\3\21\4\13\0\12\4\6\0"+
    "\22\4\6\3\3\0\1\3\4\0\12\4\34\3\10\4\2\0\27\3"+
    "\15\4\14\0\35\3\3\0\4\4\57\3\16\4\16\0\1\3\12\4"+
    "\46\0\51\3\16\4\11\0\3\3\1\4\10\3\2\4\2\0\12\4"+
    "\6\0\27\3\3\0\1\3\1\4\4\0\60\3\1\4\1\3\3\4"+
    "\2\3\2\4\5\3\2\4\1\3\1\4\1\3\30\0\3\3\43\0"+
    "\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3\221\0"+
    "\43\3\10\4\1\0\2\4\2\0\12\4\6\0\u2ba4\3\14\0\27\3"+
    "\4\0\61\3\u2104\0\u012e\3\2\0\76\3\2\0\152\3\46\0\7\3"+
    "\14\0\5\3\5\0\1\3\1\4\12\3\1\0\15\3\1\0\5\3"+
    "\1\0\1\3\1\0\2\3\1\0\2\3\1\0\154\3\41\0\u016b\3"+
    "\22\0\100\3\2\0\66\3\50\0\15\3\3\0\20\4\20\0\7\4"+
    "\14\0\2\3\30\0\3\3\31\0\1\3\6\0\5\3\1\0\207\3"+
    "\2\0\1\4\4\0\1\3\13\0\12\4\7\0\32\3\4\0\1\3"+
    "\1\0\32\3\13\0\131\3\3\0\6\3\2\0\6\3\2\0\6\3"+
    "\2\0\3\3\3\0\2\3\3\0\2\3\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\1\11\1\12\1\13\1\14\1\15\17\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\2\50\1\51\1\52\1\50\2\10\1\53\1\54"+
    "\1\55\1\56\2\14\2\15\1\3\1\57\16\3\1\60"+
    "\1\61\1\3\1\62\16\3\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\45\1\103\1\50\1\10"+
    "\1\0\1\104\1\56\1\3\1\105\1\106\6\3\1\107"+
    "\11\3\1\110\4\3\1\111\7\3\1\112\1\113\2\3"+
    "\1\114\1\115\1\116\1\117\1\120\1\0\2\103\1\0"+
    "\1\3\1\121\1\122\1\123\4\3\1\124\1\125\10\3"+
    "\1\126\2\3\1\127\1\130\1\3\1\131\5\3\1\132"+
    "\1\3\1\133\1\45\1\0\1\3\1\134\1\3\1\135"+
    "\1\3\1\136\1\137\1\3\1\140\6\3\1\141\1\142"+
    "\1\143\3\3\1\144\2\3\1\145\1\146\1\147\1\150"+
    "\1\3\1\151\1\152\1\153\3\3\1\154\3\3\1\155"+
    "\1\3\1\156\1\157\1\160\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\103\0\103"+
    "\0\103\0\103\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929"+
    "\0\u096c\0\u09af\0\u09f2\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\u0a35\0\u0a78\0\103\0\103\0\u0abb\0\u0afe\0\103"+
    "\0\u0b41\0\u0b84\0\103\0\103\0\103\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\103\0\103\0\u0c90\0\u0cd3\0\103\0\u0d16\0\103\0\u0d59"+
    "\0\311\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\311"+
    "\0\u1146\0\u1189\0\311\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\103\0\u1576\0\103\0\u15b9\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\103\0\u1814"+
    "\0\u1857\0\311\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\311\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\311\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\311\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\311\0\u1fab\0\u1fee\0\u2031\0\103\0\103\0\103\0\u2074"+
    "\0\103\0\u20b7\0\u20fa\0\103\0\u213d\0\u2180\0\311\0\311"+
    "\0\311\0\u21c3\0\u2206\0\u2249\0\u228c\0\311\0\311\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\311"+
    "\0\u24e7\0\u252a\0\311\0\311\0\u256d\0\311\0\u25b0\0\u25f3"+
    "\0\u2636\0\u2679\0\u26bc\0\311\0\u26ff\0\103\0\103\0\u2742"+
    "\0\u2785\0\311\0\u27c8\0\311\0\u280b\0\311\0\311\0\u284e"+
    "\0\311\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\311"+
    "\0\311\0\311\0\u2a23\0\u2a66\0\u2aa9\0\311\0\u2aec\0\u2b2f"+
    "\0\311\0\311\0\311\0\311\0\u2b72\0\311\0\311\0\311"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\311\0\u2c7e\0\u2cc1\0\u2d04\0\311"+
    "\0\u2d47\0\311\0\311\0\311\0\311";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\2\4\1\12\2\4\1\13\1\4\1\14\1\4"+
    "\1\2\3\4\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\4\1\23\1\24\1\25\1\26\1\27\1\30\2\4"+
    "\1\31\1\32\2\4\1\33\1\34\1\35\1\36\2\4"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\104\0\2\3\103\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\26\4\26\0\1\62\2\0\1\63\3\0\2\62\1\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\3\62\3\0"+
    "\26\62\31\0\1\64\161\0\1\65\24\0\1\66\1\67"+
    "\54\0\1\70\26\0\2\11\1\0\1\11\2\0\1\71"+
    "\1\72\3\0\1\73\1\74\1\75\10\0\1\72\10\0"+
    "\1\73\2\0\1\74\2\0\1\75\35\0\2\11\1\0"+
    "\1\11\1\76\1\77\1\71\1\72\3\0\1\73\1\74"+
    "\1\75\10\0\1\72\10\0\1\73\2\0\1\74\1\0"+
    "\1\77\1\75\35\0\1\71\2\0\1\71\2\0\1\100"+
    "\104\0\1\101\43\0\1\102\25\0\1\103\72\0\1\16"+
    "\1\0\21\16\1\104\4\16\1\105\52\16\1\17\1\0"+
    "\21\17\1\106\5\17\1\107\51\17\3\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\1\4\1\110\24\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\7\4\1\111"+
    "\1\4\1\112\2\4\1\113\11\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\1\4\1\114\11\4\1\115\2\4\1\116\7\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\5\4\1\117\20\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\11\4\1\120\4\4\1\121\7\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\7\4\1\122\1\4\1\123\14\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\5\4\1\124\1\125\6\4\1\126\2\4\1\127\5\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\7\4\1\130\1\4\1\131\1\132"+
    "\6\4\1\133\4\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\5\4\1\134"+
    "\1\135\17\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\5\4\1\136\20\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\14\4\1\137\2\4\1\140\6\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\10\4\1\141\6\4\1\142\6\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\1\4\1\143\4\4\1\144\1\4"+
    "\1\145\2\4\1\146\12\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\1\4"+
    "\1\147\11\4\1\150\12\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\14\4"+
    "\1\151\11\4\31\0\1\152\55\0\1\153\1\154\102\0"+
    "\1\155\102\0\1\156\1\157\101\0\1\160\102\0\1\161"+
    "\2\0\1\162\77\0\1\163\3\0\1\164\76\0\1\165"+
    "\102\0\1\166\5\0\1\167\74\0\1\170\20\0\2\62"+
    "\4\0\6\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\3\0\26\62\26\0\1\171\6\0\2\171\1\0\2\171"+
    "\1\0\1\171\1\0\1\171\1\0\3\171\3\0\26\171"+
    "\23\0\7\172\1\173\73\172\1\67\1\0\101\67\11\0"+
    "\2\71\1\0\1\71\3\0\1\72\4\0\1\74\1\75"+
    "\10\0\1\72\13\0\1\74\2\0\1\75\35\0\2\174"+
    "\1\0\1\174\4\0\1\174\3\0\1\74\1\75\24\0"+
    "\1\74\2\0\1\75\7\0\1\174\25\0\4\175\1\0"+
    "\1\175\1\176\1\175\3\0\1\73\2\175\4\0\2\175"+
    "\2\0\1\175\10\0\1\73\2\0\1\175\1\0\2\175"+
    "\35\0\2\77\1\0\1\77\7\0\1\73\23\0\1\73"+
    "\51\0\1\177\63\0\1\103\1\0\21\103\1\200\4\103"+
    "\1\0\52\103\1\16\1\0\101\16\1\17\1\0\101\17"+
    "\3\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\201\23\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\25\4\1\202\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\4\4\1\203"+
    "\21\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\7\4\1\204\5\4\1\205"+
    "\10\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\11\4\1\206\14\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\1\4\1\207\24\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\15\4\1\210\10\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\6\4\1\211"+
    "\15\4\1\212\1\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\7\4\1\213"+
    "\16\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\10\4\1\214\15\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\15\4\1\215\10\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\15\4\1\216\10\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\1\217\25\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\1\4\1\220\24\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\10\4\1\221\15\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\17\4"+
    "\1\222\6\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\1\223\25\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\20\4\1\224\5\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\16\4\1\225\7\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\11\4\1\226"+
    "\3\4\1\227\10\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\6\4\1\230"+
    "\16\4\1\231\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\10\4\1\232\3\4"+
    "\1\233\11\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\15\4\1\234\10\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\10\4\1\235\15\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\16\4\1\236\7\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\11\4"+
    "\1\237\14\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\11\4\1\240\14\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\14\4\1\241\11\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\14\4\1\242\11\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\10\4"+
    "\1\243\15\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\5\4\1\244\20\4"+
    "\110\0\1\245\102\0\1\246\102\0\1\247\5\0\1\250"+
    "\74\0\1\251\20\0\2\171\4\0\6\171\1\0\1\171"+
    "\1\0\1\171\1\0\3\171\3\0\26\171\23\0\7\172"+
    "\1\252\73\172\7\253\1\173\1\254\72\253\11\0\2\174"+
    "\1\0\1\174\10\0\1\74\1\75\24\0\1\74\2\0"+
    "\1\75\35\0\4\175\1\0\1\175\1\255\1\175\1\0"+
    "\1\72\1\0\1\73\2\175\3\0\1\72\2\175\2\0"+
    "\1\175\10\0\1\73\2\0\1\175\1\0\2\175\35\0"+
    "\4\255\1\0\1\255\1\0\1\255\4\0\2\255\4\0"+
    "\2\255\2\0\1\255\13\0\1\255\1\0\2\255\24\0"+
    "\1\103\1\0\101\103\3\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\3\4\1\256"+
    "\22\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\7\4\1\257\16\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\5\4\1\260\7\4\1\261\10\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\262\23\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\15\4\1\263\10\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\7\4\1\264"+
    "\16\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\15\4\1\265\10\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\12\4\1\266\13\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\5\4\1\267\20\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\11\4\1\270"+
    "\14\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\10\4\1\271\15\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\15\4\1\272\10\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\5\4\1\273\20\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\15\4\1\274"+
    "\10\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\15\4\1\275\10\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\5\4\1\276\20\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\13\4\1\277\12\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\16\4\1\300"+
    "\7\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\1\4\1\301\24\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\6\4\1\302\17\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\5\4\1\303\20\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\7\4\1\304"+
    "\16\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\13\4\1\305\12\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\17\4\1\306\6\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\16\4\1\307\7\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\7\4\1\310"+
    "\16\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\311\23\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\1\4\1\312\24\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\10\4\1\313\15\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\24\4\1\314"+
    "\1\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\1\4\1\315\24\4\110\0"+
    "\1\316\15\0\7\172\1\252\1\317\72\172\7\253\1\320"+
    "\73\253\11\0\4\255\1\0\1\255\1\0\1\255\1\0"+
    "\1\72\2\0\2\255\3\0\1\72\2\255\2\0\1\255"+
    "\13\0\1\255\1\0\2\255\27\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\1\4"+
    "\1\321\24\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\17\4\1\322\6\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\10\4\1\323\15\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\7\4\1\324\16\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\5\4"+
    "\1\325\20\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\4\4\1\326\21\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\16\4\1\327\7\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\5\4\1\330\20\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\14\4"+
    "\1\331\11\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\10\4\1\332\15\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\333\23\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\14\4\1\334\11\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\14\4"+
    "\1\335\11\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\12\4\1\336\13\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\14\4\1\337\11\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\20\4\1\340\5\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\5\4"+
    "\1\341\20\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\5\4\1\342\20\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\15\4\1\343\10\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\16\4\1\344\7\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\1\4"+
    "\1\345\24\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\3\4\1\346\22\4"+
    "\23\0\7\253\1\320\1\254\72\253\3\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\4\4\1\347\21\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\11\4\1\350"+
    "\14\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\14\4\1\351\11\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\14\4\1\352\11\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\353\23\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\17\4\1\354"+
    "\6\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\10\4\1\355\15\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\15\4\1\356\10\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\5\4\1\357\20\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\11\4\1\360"+
    "\14\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\10\4\1\361\15\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\16\4\1\362\7\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\23\4\1\363\2\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\5\4\1\364"+
    "\20\4\26\0\2\4\4\0\6\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\3\0\6\4\1\365\17\4\26\0"+
    "\2\4\4\0\6\4\1\0\1\4\1\0\1\4\1\0"+
    "\3\4\3\0\15\4\1\366\10\4\26\0\2\4\4\0"+
    "\6\4\1\0\1\4\1\0\1\4\1\0\3\4\3\0"+
    "\13\4\1\367\12\4\26\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\3\0\25\4\1\370"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\16\4\1\371\7\4\26\0\2\4"+
    "\4\0\6\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\3\0\5\4\1\372\20\4\26\0\2\4\4\0\6\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\3\0\7\4"+
    "\1\373\16\4\26\0\2\4\4\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\3\4\3\0\11\4\1\374\14\4"+
    "\26\0\2\4\4\0\6\4\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\3\0\5\4\1\375\20\4\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11658];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\4\11\11\1\6\11\2\1\2\11"+
    "\2\1\1\11\2\1\3\11\3\1\2\11\2\1\1\11"+
    "\1\1\1\11\42\1\1\11\1\1\1\11\1\1\11\11"+
    "\7\1\1\0\1\11\45\1\3\11\1\1\1\11\1\0"+
    "\1\1\1\11\1\0\40\1\2\11\1\0\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _NaxeLexer() {
    this((java.io.Reader)null);
  }


  public _NaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _NaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { return O_RSH;
          }
        case 114: break;
        case 63: 
          { return O_SEQ;
          }
        case 115: break;
        case 16: 
          { return O_NUM;
          }
        case 116: break;
        case 67: 
          { return DCOMMENT;
          }
        case 117: break;
        case 49: 
          { return K_IN;
          }
        case 118: break;
        case 99: 
          { return K_FALSE;
          }
        case 119: break;
        case 60: 
          { return O_AOR;
          }
        case 120: break;
        case 105: 
          { return K_IMPORT;
          }
        case 121: break;
        case 26: 
          { return O_NOT;
          }
        case 122: break;
        case 61: 
          { return O_BOR;
          }
        case 123: break;
        case 5: 
          { return O_COL;
          }
        case 124: break;
        case 27: 
          { return LP;
          }
        case 125: break;
        case 38: 
          { return SCOMMENT;
          }
        case 126: break;
        case 70: 
          { return K_ARG;
          }
        case 127: break;
        case 102: 
          { return K_SETTER;
          }
        case 128: break;
        case 76: 
          { return O_ALSH;
          }
        case 129: break;
        case 20: 
          { return O_SUM;
          }
        case 130: break;
        case 6: 
          { return O_MUL;
          }
        case 131: break;
        case 30: 
          { return RB;
          }
        case 132: break;
        case 17: 
          { return O_QM;
          }
        case 133: break;
        case 79: 
          { return O_ZSH;
          }
        case 134: break;
        case 48: 
          { return K_IS;
          }
        case 135: break;
        case 45: 
          { return O_ASUB;
          }
        case 136: break;
        case 18: 
          { return O_INF;
          }
        case 137: break;
        case 86: 
          { return K_NULL;
          }
        case 138: break;
        case 108: 
          { return K_PACKAGE;
          }
        case 139: break;
        case 72: 
          { return K_NEW;
          }
        case 140: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 141: break;
        case 34: 
          { return O_EAT;
          }
        case 142: break;
        case 83: 
          { return K_CAST;
          }
        case 143: break;
        case 101: 
          { return K_GETTER;
          }
        case 144: break;
        case 97: 
          { return K_THROW;
          }
        case 145: break;
        case 37: 
          { return MCOMMENT;
          }
        case 146: break;
        case 78: 
          { return O_ARSH;
          }
        case 147: break;
        case 35: 
          { return O_NS;
          }
        case 148: break;
        case 84: 
          { return K_ENUM;
          }
        case 149: break;
        case 40: 
          { return DOUBLE;
          }
        case 150: break;
        case 69: 
          { return K_ANY;
          }
        case 151: break;
        case 50: 
          { return K_IF;
          }
        case 152: break;
        case 95: 
          { return K_UNTIL;
          }
        case 153: break;
        case 22: 
          { return O_AND;
          }
        case 154: break;
        case 29: 
          { return LB;
          }
        case 155: break;
        case 103: 
          { return K_STATIC;
          }
        case 156: break;
        case 41: 
          { return LONG;
          }
        case 157: break;
        case 75: 
          { return K_VAR;
          }
        case 158: break;
        case 32: 
          { return RS;
          }
        case 159: break;
        case 23: 
          { return O_OR;
          }
        case 160: break;
        case 36: 
          { return O_AMUL;
          }
        case 161: break;
        case 47: 
          { return K_AS;
          }
        case 162: break;
        case 59: 
          { return O_BAND;
          }
        case 163: break;
        case 11: 
          { return O_NEG;
          }
        case 164: break;
        case 111: 
          { return K_INHERITS;
          }
        case 165: break;
        case 91: 
          { return O_AZSH;
          }
        case 166: break;
        case 112: 
          { return K_FUNCTION;
          }
        case 167: break;
        case 107: 
          { return K_RETURN;
          }
        case 168: break;
        case 98: 
          { return K_WHILE;
          }
        case 169: break;
        case 80: 
          { return O_NES;
          }
        case 170: break;
        case 110: 
          { return K_CONTINUE;
          }
        case 171: break;
        case 74: 
          { return K_FOR;
          }
        case 172: break;
        case 109: 
          { return K_FINALLY;
          }
        case 173: break;
        case 65: 
          { return O_NE;
          }
        case 174: break;
        case 66: 
          { return EMETA;
          }
        case 175: break;
        case 31: 
          { return LS;
          }
        case 176: break;
        case 100: 
          { return K_BREAK;
          }
        case 177: break;
        case 85: 
          { return K_ELSE;
          }
        case 178: break;
        case 89: 
          { return K_WITH;
          }
        case 179: break;
        case 21: 
          { return O_MOD;
          }
        case 180: break;
        case 4: 
          { return O_SAT;
          }
        case 181: break;
        case 81: 
          { return K_ARGS;
          }
        case 182: break;
        case 51: 
          { return O_FUN;
          }
        case 183: break;
        case 14: 
          { return O_SEM;
          }
        case 184: break;
        case 24: 
          { return O_XOR;
          }
        case 185: break;
        case 58: 
          { return O_AAND;
          }
        case 186: break;
        case 25: 
          { return O_SUP;
          }
        case 187: break;
        case 7: 
          { return O_DIV;
          }
        case 188: break;
        case 3: 
          { return WORD;
          }
        case 189: break;
        case 73: 
          { return K_TRY;
          }
        case 190: break;
        case 42: 
          { return FLOAT;
          }
        case 191: break;
        case 19: 
          { return O_ASG;
          }
        case 192: break;
        case 82: 
          { return K_CASE;
          }
        case 193: break;
        case 104: 
          { return K_SWITCH;
          }
        case 194: break;
        case 56: 
          { return O_INC;
          }
        case 195: break;
        case 13: 
          { return QSTRING;
          }
        case 196: break;
        case 12: 
          { return SSTRING;
          }
        case 197: break;
        case 88: 
          { return K_THIS;
          }
        case 198: break;
        case 53: 
          { return O_IEQ;
          }
        case 199: break;
        case 96: 
          { return K_SUPER;
          }
        case 200: break;
        case 106: 
          { return K_RENAME;
          }
        case 201: break;
        case 94: 
          { return K_USING;
          }
        case 202: break;
        case 43: 
          { return O_TO;
          }
        case 203: break;
        case 46: 
          { return REGEXP;
          }
        case 204: break;
        case 33: 
          { return SMETA;
          }
        case 205: break;
        case 92: 
          { return K_CATCH;
          }
        case 206: break;
        case 9: 
          { return O_DOT;
          }
        case 207: break;
        case 71: 
          { return K_END;
          }
        case 208: break;
        case 8: 
          { return INTEGER;
          }
        case 209: break;
        case 52: 
          { return O_LSH;
          }
        case 210: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 211: break;
        case 113: 
          { return K_VARIABLE;
          }
        case 212: break;
        case 44: 
          { return O_DEC;
          }
        case 213: break;
        case 68: 
          { return O_PAR;
          }
        case 214: break;
        case 87: 
          { return K_TRUE;
          }
        case 215: break;
        case 28: 
          { return RP;
          }
        case 216: break;
        case 54: 
          { return O_EQ;
          }
        case 217: break;
        case 15: 
          { return O_COM;
          }
        case 218: break;
        case 77: 
          { return O_EQS;
          }
        case 219: break;
        case 10: 
          { return O_SUB;
          }
        case 220: break;
        case 93: 
          { return K_CLASS;
          }
        case 221: break;
        case 57: 
          { return O_AMOD;
          }
        case 222: break;
        case 62: 
          { return O_AXOR;
          }
        case 223: break;
        case 39: 
          { return O_ADIV;
          }
        case 224: break;
        case 55: 
          { return O_AADD;
          }
        case 225: break;
        case 90: 
          { return K_VOID;
          }
        case 226: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
